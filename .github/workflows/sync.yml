name: Upstream Sync and Deploy to Workers

permissions:
  contents: write

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  sync_latest_from_upstream:
    name: Sync latest commits from upstream repo
    runs-on: ubuntu-latest
    if: ${{ github.event.repository.fork }}

    outputs:
      has_new_commits: ${{ steps.sync.outputs.has_new_commits }}
      worker_changed: ${{ steps.check_worker.outputs.worker_changed }}

    steps:
      - name: Checkout target repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Sync upstream changes
        id: sync
        uses: aormsby/Fork-Sync-With-Upstream-action@v3.4
        with:
          upstream_sync_repo: cmliu/CF-Workers-docker.io
          upstream_sync_branch: main
          target_sync_branch: main
          target_repo_token: ${{ secrets.GITHUB_TOKEN }}
          test_mode: false

      - name: Fail if sync step failed
        if: steps.sync.outcome == 'failure'
        run: |
          echo "[Error] Sync failed due to upstream changes or conflicts."
          exit 1

      - name: Check if _worker.js changed
        id: check_worker
        if: steps.sync.outputs.has_new_commits == 'true'
        run: |
          git fetch origin main
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || true)

          echo "Changed files:"
          echo "$CHANGED_FILES"

          if echo "$CHANGED_FILES" | grep -q "^_worker.js$"; then
            echo "worker_changed=true" >> $GITHUB_OUTPUT
          else
            echo "worker_changed=false" >> $GITHUB_OUTPUT
          fi

  deploy_to_cloudflare:
    name: Deploy to Cloudflare Workers
    runs-on: ubuntu-latest
    needs: sync_latest_from_upstream
    if: needs.sync_latest_from_upstream.outputs.has_new_commits == 'true' && needs.sync_latest_from_upstream.outputs.worker_changed == 'true'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  notify_failure:
    name: Notify on Failure via Telegram
    runs-on: ubuntu-latest
    if: failure()
    needs:
      - sync_latest_from_upstream
      - deploy_to_cloudflare

    steps:
      - name: Send Telegram Failure Notification
        run: |
          MESSAGE="<b>❌ GitHub Action Failed: Upstream Sync and Deploy to Workers</b>\n"
          MESSAGE+="Repository: <b>${{ github.repository }}</b>\n"

          if [[ "${{ needs.sync_latest_from_upstream.result }}" == "failure" ]]; then
            MESSAGE+="• Job <b>sync_latest_from_upstream</b> failed.\n"
          fi

          if [[ "${{ needs.deploy_to_cloudflare.result }}" == "failure" ]]; then
            MESSAGE+="• Job <b>deploy_to_cloudflare</b> failed.\n"
          fi

          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\", \"text\": \"$MESSAGE\", \"parse_mode\": \"HTML\"}"

  notify_success:
    name: Notify on Success via Telegram
    runs-on: ubuntu-latest
    # only run if upstream actually had changes
    if: needs.sync_latest_from_upstream.outputs.has_new_commits == 'true' && success()
    needs:
      - sync_latest_from_upstream
      - deploy_to_cloudflare

    steps:
      - name: Send Telegram Success Notification
        run: |
          MESSAGE="<b>✅ GitHub Action Succeeded: Upstream Sync and Deploy to Workers</b>\n"
          MESSAGE+="Repository: <b>${{ github.repository }}</b>\n"

          if [[ "${{ needs.sync_latest_from_upstream.outputs.worker_changed }}" == "false" ]]; then
            MESSAGE+="• Upstream changes detected.\n"
            MESSAGE+="• _worker.js was unchanged. No deployment triggered.\n"
          else
            MESSAGE+="• Upstream changes detected.\n"
            MESSAGE+="• _worker.js changed. Deployment triggered and succeeded.\n"
          fi

          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\", \"text\": \"$MESSAGE\", \"parse_mode\": \"HTML\"}"
